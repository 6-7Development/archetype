diff -ruN /mnt/data/archetype-src-original/render.yaml /mnt/data/archetype-src/render.yaml
--- /mnt/data/archetype-src-original/render.yaml	2025-10-25 16:28:37.164895386 +0000
+++ /mnt/data/archetype-src/render.yaml	2025-10-25 16:28:27.845018954 +0000
@@ -19,7 +19,7 @@
     region: oregon # Same region as database for low latency
     installCommand: npm ci
     buildCommand: npm run build
-    startCommand: npm start
+    startCommand: bash start-production.sh
     healthCheckPath: /health
     autoDeploy: true
     envVars:
diff -ruN /mnt/data/archetype-src-original/server/db.ts /mnt/data/archetype-src/server/db.ts
--- /mnt/data/archetype-src-original/server/db.ts	2025-10-25 16:28:37.127660654 +0000
+++ /mnt/data/archetype-src/server/db.ts	2025-10-25 16:27:34.883357420 +0000
@@ -9,14 +9,26 @@
 }
 
 const rawUrl = process.env.DATABASE_URL;
+function sanitizeConnStr(url: string) {
+  try {
+    const u = new URL(url);
+    // Remove query params that can override `ssl` options in node-postgres
+    ['ssl','sslmode','sslcert','sslkey','sslrootcert'].forEach(k => u.searchParams.delete(k));
+    return u.toString();
+  } catch {
+    return url;
+  }
+}
+
+const connStr = sanitizeConnStr(rawUrl);
 const parsed = new URL(rawUrl);
 const maskedUrl = `${parsed.protocol}//${parsed.username ? "***@" : ""}${parsed.host}${parsed.pathname}`;
 
 console.info(`[db] Environment: NODE_ENV=${process.env.NODE_ENV}, PORT=${process.env.PORT}`);
-console.info(`[db] Using DATABASE_URL: ${maskedUrl}`);
+console.info(`[db] Using DATABASE_URL: ${maskedUrl} (sanitized)`);
 
 export const pool = new Pool({ 
-  connectionString: rawUrl,
+  connectionString: connStr,
   ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
   connectionTimeoutMillis: 5000,
 });
diff -ruN /mnt/data/archetype-src-original/server/universalAuth.ts /mnt/data/archetype-src/server/universalAuth.ts
--- /mnt/data/archetype-src-original/server/universalAuth.ts	2025-10-25 16:28:37.128194875 +0000
+++ /mnt/data/archetype-src/server/universalAuth.ts	2025-10-25 16:27:52.871218118 +0000
@@ -16,27 +16,17 @@
 export function getSession() {
   const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week
   const pgStore = connectPg(session);
-  
-  // SSL configuration for production (Render PostgreSQL requires SSL)
-  const storeConfig = process.env.NODE_ENV === 'production'
-    ? {
-        conObject: {
-          connectionString: process.env.DATABASE_URL,
-          ssl: { rejectUnauthorized: false },
-        },
-        createTableIfMissing: false,
-        ttl: sessionTtl,
-        tableName: "sessions",
-      }
-    : {
-        conString: process.env.DATABASE_URL,
-        createTableIfMissing: false,
-        ttl: sessionTtl,
-        tableName: "sessions",
-      };
-  
-  const sessionStore = new pgStore(storeConfig);
-  
+
+// Reuse the shared Pool from ./db so SSL behavior is consistent
+import { pool } from "./db";
+
+const sessionStore = new pgStore({
+  pool,
+  createTableIfMissing: true,
+  ttl: sessionTtl,
+  tableName: "sessions",
+});
+
   return session({
     secret: process.env.SESSION_SECRET!,
     store: sessionStore,
diff -ruN /mnt/data/archetype-src-original/server/vite.ts /mnt/data/archetype-src/server/vite.ts
--- /mnt/data/archetype-src-original/server/vite.ts	2025-10-25 16:28:37.104471590 +0000
+++ /mnt/data/archetype-src/server/vite.ts	2025-10-25 16:28:00.547271084 +0000
@@ -1,6 +1,7 @@
 import express, { type Express } from "express";
 import fs from "fs";
 import path from "path";
+import { fileURLToPath } from "url";
 import { createServer as createViteDevServer, createLogger } from "vite";
 import { type Server } from "http";
 import viteConfig from "../vite.config";
@@ -8,6 +9,10 @@
 
 const viteLogger = createLogger();
 
+// ESM-safe __dirname
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
 export function log(message: string, source = "express") {
   const formattedTime = new Date().toLocaleTimeString("en-US", {
     hour: "numeric",
@@ -39,7 +44,7 @@
 }
 
 export function serveStatic(app: Express) {
-  const distPath = path.resolve(import.meta.dirname, "public");
+  const distPath = path.resolve(__dirname, "public");
 
   if (!fs.existsSync(distPath)) {
     throw new Error(
diff -ruN /mnt/data/archetype-src-original/start-production.sh /mnt/data/archetype-src/start-production.sh
--- /mnt/data/archetype-src-original/start-production.sh	2025-10-25 16:28:37.161989955 +0000
+++ /mnt/data/archetype-src/start-production.sh	2025-10-25 16:28:22.104797014 +0000
@@ -1,17 +1,18 @@
 #!/bin/bash
 set -e
 
-# Set production environment for migrations
+# Ensure production environment
 export NODE_ENV=production
 
-echo "ðŸ”§ Running database migrations..."
-# Add SSL parameters to DATABASE_URL for drizzle-kit (Render PostgreSQL requires SSL)
+echo "ðŸ”§ Running database migrations (temporary SSL for Drizzle)..."
+# Pass a temporary DATABASE_URL **only for the migration command**
 if [[ "$DATABASE_URL" == *"?"* ]]; then
-  export DATABASE_URL="${DATABASE_URL}&ssl=true"
+  DB_URL_MIG="${DATABASE_URL}&sslmode=require"
 else
-  export DATABASE_URL="${DATABASE_URL}?ssl=true"
+  DB_URL_MIG="${DATABASE_URL}?sslmode=require"
 fi
-npm run db:push
+DATABASE_URL="$DB_URL_MIG" npm run db:push
 
 echo "ðŸš€ Starting production server..."
+# IMPORTANT: start the app with the ORIGINAL DATABASE_URL (no ssl/sslmode params)
 node dist/index.js
diff -ruN /mnt/data/archetype-src-original/vite.config.ts /mnt/data/archetype-src/vite.config.ts
--- /mnt/data/archetype-src-original/vite.config.ts	2025-10-25 16:28:37.103800565 +0000
+++ /mnt/data/archetype-src/vite.config.ts	2025-10-25 16:28:12.151068255 +0000
@@ -1,8 +1,13 @@
 import { defineConfig } from "vite";
 import react from "@vitejs/plugin-react";
 import path from "path";
+import { fileURLToPath } from "url";
 import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
 
+
+// ESM-safe __dirname for Vite config
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
 export default defineConfig({
   plugins: [
     react(),
@@ -21,14 +26,14 @@
   ],
   resolve: {
     alias: {
-      "@": path.resolve(import.meta.dirname, "client", "src"),
-      "@shared": path.resolve(import.meta.dirname, "shared"),
-      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
+      "@": path.resolve(__dirname, "client", "src"),
+      "@shared": path.resolve(__dirname, "shared"),
+      "@assets": path.resolve(__dirname, "attached_assets"),
     },
   },
-  root: path.resolve(import.meta.dirname, "client"),
+  root: path.resolve(__dirname, "client"),
   build: {
-    outDir: path.resolve(import.meta.dirname, "dist/public"),
+    outDir: path.resolve(__dirname, "dist/public"),
     emptyOutDir: true,
   },
   server: {
