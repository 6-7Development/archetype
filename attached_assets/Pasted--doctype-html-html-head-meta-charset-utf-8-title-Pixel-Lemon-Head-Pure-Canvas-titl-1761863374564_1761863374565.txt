<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>Pixel Lemon Head — Pure Canvas</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
  html,body{height:100%;margin:0;background:#0d0f14;display:grid;place-items:center}
  canvas{image-rendering: pixelated; image-rendering: crisp-edges; background:#0d0f14}
  .hint{position:fixed;bottom:10px;left:10px;color:#cfe3ff;font:12px/1.3 system-ui}
  .hint code{background:#111;padding:2px 6px;border-radius:6px}
</style>
</head>
<body>
<canvas id="view" width="512" height="512"></canvas>
<div class="hint">
  Keys: <code>B</code>=blink <code>T</code>=talk <code>S</code>=smile
  <code>1</code>=happy <code>2</code>=excited <code>3</code>=annoyed
</div>

<script>
/* ----------------------- Pixel canvas helpers ----------------------- */
const view = document.getElementById('view');
const vctx = view.getContext('2d');

// logical tiny grid (w×h) scaled up to canvas size
const W = 48, H = 48, SCALE = Math.floor(Math.min(view.width, view.height) / Math.max(W,H));
const off = document.createElement('canvas'); off.width=W; off.height=H;
const px = off.getContext('2d', {alpha:true});
px.imageSmoothingEnabled = false;

function clear() { px.clearRect(0,0,W,H); }
function pset(x,y,c){ if(x<0||y<0||x>=W||y>=H) return; px.fillStyle=c; px.fillRect(x, y, 1, 1); }
function pbox(x,y,w,h,c){ px.fillStyle=c; px.fillRect(x,y,w,h); }

/* ----------------------- Palette & state ----------------------- */
const PALETTES = {
  happy:   { lemon1:'#FFE46B', lemon2:'#F6BF2A', line:'#A66B16', cap1:'#1AA13B', cap2:'#0E7A2C', red1:'#D94A2C', red2:'#9C2817', glass:'#A82A1B', shine:'#FFFFFF' },
  excited: { lemon1:'#FFF07A', lemon2:'#F6C43A', line:'#A66B16', cap1:'#28B34A', cap2:'#138B38', red1:'#E35733', red2:'#A02C1A', glass:'#B63020', shine:'#FFFFFF' },
  annoyed: { lemon1:'#E9D068', lemon2:'#DBAB2D', line:'#8D5A13', cap1:'#14823A', cap2:'#0B5E29', red1:'#B73E28', red2:'#7D2213', glass:'#7C1C10', shine:'#DCDCDC' }
};

let mood = 'happy';
let talking = false;
let smiling = false;
let blinkT = 0; // 0..1 (1=open)
let nextBlinkAt = 1000 + Math.random()*2500;

/* ----------------------- Drawing the sprite ----------------------- */
function drawLemon(t){
  const P = PALETTES[mood];
  const breathe = Math.sin(t*0.0025)*0.5; // +/-0.5px
  const bob = (mood==='excited'? Math.max(0,Math.sin(t*0.006))*1.6 : 0);

  // center origin around (24, 28)
  const cx=24, cy=28 + bob;

  // body (simple radial-ish dithering)
  for(let y=-16; y<=16; y++){
    for(let x=-18; x<=18; x++){
      const dx=x, dy=y + (y>10? (y-10)/2 : 0); // little chin taper
      if((dx*dx)/(18*18) + (dy*dy)/(16*16) <= 1){
        const shade = (y < -6) ? P.lemon1 : P.lemon2;
        pset(cx+x, cy+y + (y>8?1:0) + breathe, shade);
      }
    }
  }
  // outline
  outlineEllipse(cx, cy, 18, 16, P.line);
  // chin point
  pset(cx, cy+18, P.line); pset(cx, cy+19, P.line);

  // leaf cap + stem with sway
  const sway = Math.sin(t*0.01)*2;
  // cap band
  pbox(cx-17, cy-17, 34, 5, P.cap2);
  pbox(cx-16, cy-18, 32, 4, P.cap1);
  // stem
  pbox(cx+5, cy-24, 2, 5, P.cap2);
  // leaf
  for(let y=-4;y<=4;y++){
    for(let x=0;x<=10;x++){
      if(Math.abs(y) <= (5 - Math.floor(x/2))){
        pset(cx+7+x, cy-26+y+Math.floor((x)/5)+Math.round(sway/3), P.cap1);
      }
    }
  }
  // cap highlight
  pset(cx+6, cy-18, P.shine); pset(cx+7, cy-18, P.shine);

  // strap behind goggles
  pbox(cx-20, cy-7, 40, 6, P.red2);

  // goggles (two round-ish frames)
  drawGoggle(cx-9, cy-7, P);
  drawGoggle(cx+9, cy-7, P);

  // eyes (with blink)
  drawEye(cx-9, cy-7, P);
  drawEye(cx+9, cy-7, P);

  // mouth
  drawMouth(cx, cy+6, P, t);
}

function outlineEllipse(cx,cy,rx,ry,col){
  for(let a=0;a<360;a++){
    const r = a*Math.PI/180;
    const x = Math.round(cx + Math.cos(r)*rx);
    const y = Math.round(cy + Math.sin(r)*ry);
    pset(x,y,col);
  }
}

function drawGoggle(x,y,P){
  // frame
  for(let yy=-6; yy<=6; yy++){
    for(let xx=-6; xx<=6; xx++){
      const d = Math.abs(xx)+Math.abs(yy*1.2);
      if(d<=7){
        pset(x+xx, y+yy, P.red1);
        if(d===7) pset(x+xx, y+yy, P.red2);
      }
    }
  }
}

function drawEye(x,y,P){
  // lens tint
  for(let yy=-4;yy<=4;yy++){
    for(let xx=-4;xx<=4;xx++){
      const d = Math.abs(xx)+Math.abs(yy*1.2);
      if(d<=5) pset(x+xx, y+yy, P.glass);
    }
  }
  // pupil & shines (hidden by blink)
  if(blinkT>0.1){ // open enough to show
    pset(x-1, y, '#FFD983');
    pset(x+1, y-1, '#FFFFFF');
  }
  // eyelid overlay (top-down)
  const lidRows = Math.round((1-blinkT)*9); // 0..9
  for(let r=0;r<lidRows;r++){
    pbox(x-6, y-6+r, 13, 1, '#0d0f14');
  }
}

function drawMouth(x,y,P,t){
  if(talking){
    // open/close
    const s = (Math.sin(t*0.03)+1)/2; // 0..1
    const w = 6 + Math.floor(s*4), h = 2 + Math.floor(s*4);
    pbox(x-w, y, 2*w+1, h, '#7A1E08');
    pbox(x-w+1, y+1, 2*w-1, Math.max(0,h-2), '#EE6B31'); // tongue/inside
  } else if(smiling || mood==='happy'){
    pbox(x-7, y+1, 15, 3, '#7A1E08');
    pbox(x-5, y+2, 11, 2, '#EE6B31');
  } else if(mood==='annoyed'){
    // slight frown
    pbox(x-6, y+3, 13, 1, '#7A1E08');
    pbox(x-4, y+4, 9, 1, '#7A1E08');
  } else {
    pbox(x-5, y+2, 11, 1, '#7A1E08');
  }
}

/* ----------------------- Particles (hearts / steam) ----------------------- */
const parts=[];
function burst(kind='heart'){
  for(let i=0;i<14;i++){
    parts.push({
      x:24, y:25, vx:(Math.random()-0.5)*0.4, vy:-Math.random()*0.6-0.4,
      t:0, life:1.2, kind
    });
  }
}
function updateParts(dt){
  for(let i=parts.length-1;
